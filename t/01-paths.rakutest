use Test;
use lib 'lib';
use App::Racoco::Configuration;
use App::Racoco::Paths;
use App::Racoco::X;
use lib 't/lib';
use TestHelper;
use TestResources;

plan 12;

my $exam = TestResources::exam-directory;
sub setup() {
	plan $*plan;
	TestResources::prepare($*subtest) unless $*wo-resources;
}

'01-from-lib'.&test(:6plan, {
	setup();
	indir($exam, {
		throws-like { Paths.from(:lib<non-exist>) }, App::Racoco::X::WrongLibPath,
				'throw non-esist';
		throws-like { Paths.from(:lib<non-lib-dir>) }, App::Racoco::X::WrongLibPath,
				'throw non-lib-dir';
		my $p = Paths.from(:lib<exist-lib>);
		ok $p.lib.e, 'lib exist';
		ok $p.root.e, 'root exist';
		ok $p.racoco.e, 'racoco exist';
		is $p.lib.parent, $p.root, 'root is parent of lib';
	});
});

'02-root-hash-name'.&test(:1plan, :wo-resources, {
	setup();
	is root-hash-name('/home/user/projects/project'),
		'B8D6346BB8E1B3654A01753655EA8BF0521B17A6',
		'root hash name';
});

'03-racoco-path'.&test(:1plan, {
	setup();
	my $path = racoco-path(lib => TestResources::exam-directory.add('lib'));
	ok $path.add('.keep').e, 'racoco path with root id';
});

subtest '04-config-path-from-config', {
	plan 1;
	is config-path(root => $*CWD), $*CWD.add(App::Racoco::Paths::CONFIG-FILE),
		'config file from configuration';
}

TestResources::prepare('whole');
my $lib = TestResources::exam-directory.add('lib');

{
	my $racoco-path = racoco-path(:$lib);
	ok $racoco-path.is-absolute, 'racoco path is absolute';
	ok $racoco-path.e, 'racoco path exists';
}

{
	my $precomp-path = our-precomp-path(:$lib);
	ok $precomp-path.is-absolute, 'precomp path is absolute';
	ok $precomp-path.e, 'precomp path exists';
}

{
	nok lib-precomp-path(:$lib).e, 'lib precomp path does not exists by default';
}

{
	is our-precomp-path(:$lib).parent, racoco-path(:$lib), 'out precomp parent';
	isnt our-precomp-path(:$lib), lib-precomp-path(:$lib), 'lib and our precomp';
}

{
  is parent-name($lib), 'exam', 'parent name ok';
}
